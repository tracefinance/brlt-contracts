# Vault0 - AI Coding Agent Development Rules

## Project Overview

Vault0 is a Multi-Signature Crypto Wallet smart contract project that implements a secure dual-signature system for cryptocurrency withdrawals and a robust recovery mechanism. The project is built using Solidity for Ethereum-compatible blockchains, with support for deployment on Base and Polygon zkEVM networks.

### Key Components
- **MultiSigWallet.sol**: Main wallet contract implementing dual-signature and recovery functionality
- **Test Suite**: Comprehensive tests with high code coverage requirements (90%+)
- **Deployment Scripts**: Network-specific deployment with automatic verification
- **CI/CD Pipeline**: GitHub Actions workflow for compilation, testing, and coverage reporting

## Development Standards

### 1. Smart Contract Development

#### Code Quality
- **High Test Coverage**: Maintain at least 90% code coverage for all contracts
- **Security First**: All code must adhere to blockchain security best practices
- **Gas Optimization**: Optimize functions for gas efficiency without compromising security
- **Documentation**: All functions must have NatSpec documentation

#### Solidity Standards
- Follow Solidity style guide and best practices
- Use the latest stable Solidity version
- Include thorough event logging for all state changes
- Implement proper access control and permission checks

### 2. Development Workflow

#### Environment Setup
- Use Node.js ≥ 14.0.0 and npm ≥ 6.0.0
- Create appropriate `.env` files for different environments
- For local testing, use Hardhat's local development node

#### Testing Protocol
- Write tests for all contract functions
- Include both positive and negative test cases
- Test all edge cases and permission boundaries
- Always run full test suite before submitting code

#### Deployment Process
- Test on testnet before any mainnet deployment
- Verify contract source code on block explorers
- Use separate deployment scripts for different networks
- Double-check constructor parameters before deployment

### 3. Package Management

#### System Packages
- Use Homebrew (`brew`) for all system-level package installations
- Update package information with `brew update` before installations
- Use `brew upgrade` for updating existing packages

#### JavaScript/Node.js Packages
- Use npm for dependency management
- Maintain consistent and locked versions in package.json
- Run `npm ci` instead of `npm install` in CI environments

### 4. CI/CD Practices

#### GitHub Actions
- Follow Angular convetion for commit messages
- All pull requests to main branch must pass CI checks
- CI pipeline includes compilation, testing, and coverage reporting
- Code quality gates must be passed before merging
- Coverage reports are sent to Codecov for tracking

#### Build Process
- Use the Makefile for standardized build commands
- Run `make build` to compile contracts
- Run `make test` to execute the test suite
- Run `make test-coverage` for coverage reporting

### 5. Security Considerations

#### Private Key Management
- Never commit private keys to the repository
- Use environment variables for sensitive information
- Implement robust key rotation and management procedures

#### Smart Contract Security
- Implement proper timelock mechanisms (72-hour recovery period)
- Include comprehensive event logging
- Use multi-signature for critical operations
- Follow withdrawal best practices with expiration time

### 6. Network Configuration

#### Supported Networks
- **Base**: Mainnet (Chain ID 8453) and Testnet (Chain ID 84531)
- **Polygon zkEVM**: Mainnet (Chain ID 1101) and Testnet (Chain ID 1442)

#### Network-Specific Requirements
- Each network deployment requires specific RPC URLs and API keys
- Block explorer verification requires appropriate API keys

## Contribution Guidelines

1. **Branch Structure**:
   - Create feature branches from `main`
   - Use descriptive branch names (e.g., `feature/recovery-mechanism`)

2. **Pull Request Process**:
   - Ensure all tests pass
   - Maintain code coverage requirements
   - Include comprehensive PR description
   - Address all review comments

3. **Code Review Standards**:
   - Security-focused code review
   - Gas optimization checks
   - Functionality verification
   - Style and documentation review

## Documentation Standards

- Keep README.md updated with the latest project information
- Document all contract interfaces and function behaviors
- Include deployment guides for different networks
- Document security considerations and best practices
