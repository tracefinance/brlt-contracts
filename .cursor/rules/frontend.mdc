---
description: NextJS
globs: ui/**/*,*.ts,*.vue
alwaysApply: false
---
# Frontend Development Guidelines

## Overview

This document provides essential guidelines for AI agents working on the Vault0 frontend codebase, which is built with Nuxt 3. Adhering to these rules ensures consistency and maintainability.

## Technology Stack

- **Framework**: Nuxt 3
- **Language**: TypeScript
- **Styling**: TailwindCSS with shadcn/ui components located in `~/components/ui/`
- **State Management**: Nuxt's built-in composables with Vue's Composition API
- **API Integration**: Nuxt plugin with dedicated client modules
- **Form Handling**: Vue's v-model with validation
- **Authentication**: Server-side authentication with HTTP-only cookies
- **Testing**: Vitest and Vue Testing Library

## ❗ Key Rules for AI Agents ❗

1. **Package Installation Directory**: **ALWAYS** install npm packages within the `vault0/ui` directory. Navigate using `cd ui` **BEFORE** running `npm install <package>` or `npm add <package>`. Do **NOT** install packages at the project root (`vault0/`).

2. **API Integration**: Use the specific API client modules (e.g., `wallet`, `token`, `signer`) provided by the Nuxt plugin (`$api`) for server communication. Access them in your composables and components using `const { $api } = useNuxtApp()`.

3. **Model Types**: Define and use TypeScript interfaces in the `types/` directory. Use helper functions (`fromJson`, `fromJsonArray`, `toJson`) and factory objects for mapping API data (snake_case) to frontend types (camelCase).

4. **Token-Based Pagination**: Follow the backend's token-based pagination pattern by using the `nextToken` parameter in API requests and the `IPagedResponse<T>` interface from `~/types/model.ts`.

5. **Nuxt Auto-Imports**: Leverage Nuxt 3's auto-import feature. **DO NOT** explicitly import components from `~/components/` or composables from `~/composables/`. Nuxt handles this automatically.

6. **Composable Exports**: Composables should **ALWAYS** export a default function (e.g., `export default function() { ... }`) instead of a named function (e.g., `export function useMyComposable() { ... }`). This is required for Nuxt's auto-import to work correctly with composables.

7. **shadcn/ui Components**: Use the provided shadcn/ui components in `~/components/ui/` for consistent UI elements. These are auto-imported by Nuxt.

8. **Error Handling**: Implement robust error handling in composables and components. Use the toast system for user notifications.

## Project Structure (`vault0/ui`)

```
vault0/ui/
├── .nuxt/                    # Nuxt build directory (auto-generated)
├── public/                   # Static assets
├── assets/                   # Global assets (images, fonts, etc.)
├── components/               # Vue components (auto-imported)
│   ├── ui/                   # shadcn/ui components
│   ├── wallet/               # Wallet-specific components
│   ├── transaction/          # Transaction-specific components
│   ├── user/                 # User-specific components
│   ├── signer/               # Signer-specific components
│   └── pagination/           # Pagination components
├── composables/              # Vue composables (auto-imported)
├── layouts/                  # Page layouts
├── lib/                      # Utility functions
├── pages/                    # Application routes/pages
│   ├── index.vue             # Home page
│   ├── wallets/              # Wallet routes
│   │   ├── index.vue         # Wallets list
│   │   └── [chainType]/      # Dynamic route for chain type
│   │       └── [address]/    # Dynamic route for wallet address
│   └── settings/             # Settings routes
├── plugins/                  # Nuxt plugins
│   ├── api/                  # API client infrastructure and service modules
│   │   ├── client.ts         # Base API client class
│   │   ├── endpoints.ts      # API endpoint definitions
│   │   ├── index.ts          # Nuxt plugin setup
│   │   ├── wallet.ts         # Wallet API client module
│   │   ├── token.ts          # Token API client module
│   │   ├── transaction.ts    # Transaction API client module
│   │   ├── signer.ts         # Signer API client module
│   │   └── ...               # Other specific client modules
├── server/                   # Server-side code
├── types/                    # TypeScript type definitions
│   ├── index.ts              # Type exports
│   ├── model.ts              # Base model helpers (fromJson, etc.)
│   ├── wallet.ts             # Wallet types
│   ├── token.ts              # Token types
│   ├── signer.ts             # Signer types
│   └── ...                   # Other specific type definitions
├── app.vue                   # Root Vue component
├── nuxt.config.ts            # Nuxt configuration
├── tailwind.config.js        # Tailwind CSS configuration
├── tsconfig.json             # TypeScript configuration
└── components.json           # shadcn/ui configuration
```

## Feature Implementation Pattern

The Vault0 frontend follows a consistent pattern for implementing features, exemplified by the "signers" feature:

### 1. Data Types (`types/signer.ts`)

Define TypeScript interfaces for your feature's data models and API requests/responses:

```typescript
import { fromJson, fromJsonArray, toJson } from './model';

// Define the data model
export interface ISigner {
  id: string;
  name: string;
  type: 'internal' | 'external';
  userId?: string;
  addresses?: IAddress[];
  createdAt: string;
  updatedAt: string;
}

// Define a factory object for data transformation
export const Signer = {
  fromJson(json: any): ISigner {
    const signer = fromJson<ISigner>(json);
    if (json.addresses) {
      signer.addresses = Address.fromJsonArray(json.addresses);
    }
    return signer;
  },
  
  fromJsonArray(jsonArray: any[]): ISigner[] {
    return jsonArray.map(json => Signer.fromJson(json));
  }
};

// Define request types for API operations
export interface ICreateSignerRequest {
  name: string;
  type: ISignerType;
  userId?: number;
}

export const CreateSignerRequest = {
  create(name: string, type: ISignerType, userId?: number): ICreateSignerRequest {
    return { name, type, userId };
  },
  toJson(request: ICreateSignerRequest): any {
    return toJson(request);
  }
};
```

### 2. API Client Module (`plugins/api/signer.ts`)

Create a client class for interacting with the API:

```typescript
import type { ISigner, ICreateSignerRequest, IPagedResponse } from '~/types';
import { Signer, fromJsonArray } from '~/types';
import type { ApiClient } from './client';
import { API_ENDPOINTS } from './endpoints';

export class SignerClient {
  private client: ApiClient;

  constructor(client: ApiClient) {
    this.client = client;
  }

  async createSigner(request: ICreateSignerRequest): Promise<ISigner> {
    const data = await this.client.post<any>(API_ENDPOINTS.SIGNERS.BASE, request);
    return Signer.fromJson(data);
  }

  async getSigner(id: string): Promise<ISigner> {
    const endpoint = API_ENDPOINTS.SIGNERS.BY_ID(id);
    const data = await this.client.get<any>(endpoint);
    return Signer.fromJson(data);
  }

  async listSigners(limit: number = 10, nextToken?: string): Promise<IPagedResponse<ISigner>> {
    const params: Record<string, any> = { limit };
    if (nextToken) {
      params.next_token = nextToken;
    }
    
    const data = await this.client.get<any>(API_ENDPOINTS.SIGNERS.BASE, params);
    return {
      items: fromJsonArray<ISigner>(data.items || []),
      limit: data.limit,
      nextToken: data.nextToken
    };
  }
}
```

### 3. Register the API Client (`plugins/api/index.ts`)

```typescript
import { defineNuxtPlugin } from '#app';
import { ApiClient } from './client';
import { SignerClient } from './signer';
// ... other imports

export default defineNuxtPlugin((nuxtApp) => {
  // Create the API client
  const apiClient = new ApiClient();
  const config = useRuntimeConfig();
  const apiBase = config.public.apiBase as string || 'http://localhost:8080/api/v1';
  apiClient.setBaseUrl(apiBase);

  // Create service clients
  const signerClient = new SignerClient(apiClient);
  // ... other clients

  // Provide API services to the application
  return {
    provide: {
      api: {
        signer: signerClient,
        // ... other clients
      }
    }
  };
});
```

### 4. Data Fetching Composable (`composables/useSignersList.ts`)

```typescript
import { computed } from 'vue'
import type { Ref } from 'vue'
import type { IPagedResponse, ISigner } from '~/types'

export default function (limit: Ref<number>, nextToken: Ref<string | undefined>) {
  const { $api } = useNuxtApp()

  const { 
    data: signersData, 
    status,
    error, 
    refresh 
  } = useAsyncData<IPagedResponse<ISigner>>(
    'signersList',
    () => $api.signer.listSigners(limit.value, nextToken.value), 
    {
      watch: [limit, nextToken],
      default: () => ({ items: [], limit: limit.value, nextToken: undefined })
    }
  )

  const signers = computed<ISigner[]>(() => signersData.value?.items || [])
  const nextPageToken = computed<string | undefined>(() => signersData.value?.nextToken)
  const isLoading = computed<boolean>(() => status.value === 'pending')

  return {
    signers,
    nextPageToken,
    isLoading,
    error,
    refresh,
  }
}
```

### 5. Mutation Composable (`composables/useSignerMutations.ts`)

```typescript
import { ref } from 'vue'
import { useNuxtApp } from '#app'
import type { ICreateSignerRequest, ISigner } from '~/types'

export default function () {
  const { $api } = useNuxtApp()
  const isCreating = ref(false)
  const error = ref<Error | null>(null)

  const createSigner = async (payload: ICreateSignerRequest): Promise<ISigner | null> => {
    isCreating.value = true
    error.value = null
    try {
      const newSigner = await $api.signer.createSigner(payload)
      return newSigner
    } catch (err) {
      console.error('Error creating signer:', err)
      error.value = err as Error
      return null
    } finally {
      isCreating.value = false
    }
  }

  return {
    isCreating,
    error,
    createSigner,
    // ... other mutation methods
  }
}
```

### 6. Feature Component (`components/signer/AddAddressDialog.vue`)

```vue
<script setup lang="ts">
import { ref, watch } from 'vue'
import { toast } from 'vue-sonner'

// Props
const props = defineProps<{
  signerId: string
  open: boolean
}>()

// Emits
const emit = defineEmits<{
  (e: 'update:open', value: boolean): void
  (e: 'addressAdded'): void
}>()

// Internal state for the dialog
const internalOpen = ref(props.open)
const newAddress = ref('')
const newAddressChain = ref<string>('')

// Use composables (auto-imported)
const { addAddress, isAddingAddress, error } = useSignerMutations()

// Handle form submission
const handleAddAddress = async () => {
  try {
    await addAddress(props.signerId, {
      address: newAddress.value.trim(),
      chainType: newAddressChain.value
    })
    
    toast.success('Address added successfully!')
    emit('addressAdded')
    internalOpen.value = false
  } catch (err) {
    toast.error('Failed to add address')
  }
}
</script>

<template>
  <Dialog :open="internalOpen" @update:open="internalOpen = $event">
    <DialogContent>
      <!-- Form content -->
      <Button @click="handleAddAddress">Add</Button>
    </DialogContent>
  </Dialog>
</template>
```

### 7. Page Integration (`pages/signers/index.vue`)

```vue
<script setup lang="ts">
// Use composables (auto-imported)
const limit = ref(10)
const nextToken = ref<string | undefined>(undefined)

const { signers, nextPageToken, isLoading } = useSignersList(limit, nextToken)
const { createSigner, isCreating } = useSignerMutations()

// Pagination handling
const handleNext = () => {
  if (nextPageToken.value) {
    nextToken.value = nextPageToken.value
  }
}
</script>

<template>
  <div>
    <h1>Signers</h1>
    
    <!-- Loading state -->
    <div v-if="isLoading">Loading...</div>
    
    <!-- Signers list -->
    <div v-else>
      <!-- Render signers -->
      
      <!-- Pagination -->
      <Button 
        v-if="nextPageToken" 
        @click="handleNext" 
        :disabled="isLoading"
      >
        Load More
      </Button>
    </div>
  </div>
</template>
```

## Token-Based Pagination Pattern

The frontend implements token-based pagination to match the backend's implementation:

### 1. API Response Model (`types/model.ts`)

```typescript
export interface IPagedResponse<T> {
  items: T[];
  limit: number;
  nextToken?: string;
}
```

### 2. Pagination Composable (`composables/usePagination.ts`)

```typescript
export default function<T>(fetchFunction: (limit: number, nextToken?: string) => Promise<IPagedResponse<T>>) {
  const limit = ref(10)
  const nextToken = ref<string | undefined>(undefined)
  const items = ref<T[]>([])
  const isLoading = ref(false)
  const error = ref<Error | null>(null)
  
  const loadMore = async () => {
    isLoading.value = true
    error.value = null
    
    try {
      const response = await fetchFunction(limit.value, nextToken.value)
      items.value = [...items.value, ...response.items]
      nextToken.value = response.nextToken
    } catch (err) {
      error.value = err as Error
    } finally {
      isLoading.value = false
    }
  }
  
  const refresh = async () => {
    items.value = []
    nextToken.value = undefined
    await loadMore()
  }
  
  // Initial load
  loadMore()
  
  return {
    items,
    limit,
    nextToken,
    isLoading,
    error,
    loadMore,
    refresh,
    hasMore: computed(() => !!nextToken.value)
  }
}
```

## Error Handling Guidelines

Follow this pattern for handling errors in the frontend:

### 1. API Client Error Handling (`plugins/api/client.ts`)

The base client should handle HTTP errors and parse error responses from the backend:

```typescript
async request<T>(method: string, url: string, data?: any, params?: any): Promise<T> {
  try {
    const response = await fetch(/* ... */)
    
    if (!response.ok) {
      const errorData = await response.json()
      throw new ApiError(errorData.message || 'Request failed', {
        status: response.status,
        code: errorData.code,
        details: errorData.details
      })
    }
    
    return await response.json()
  } catch (error) {
    // Re-throw with better context
    if (error instanceof ApiError) {
      throw error
    }
    throw new ApiError('Network error', { cause: error })
  }
}
```

### 2. Composable Error Handling (`composables/useSignerMutations.ts`)

Composables should capture and expose errors:

```typescript
const createSigner = async (payload: ICreateSignerRequest): Promise<ISigner | null> => {
  isCreating.value = true
  error.value = null
  try {
    const newSigner = await $api.signer.createSigner(payload)
    return newSigner
  } catch (err) {
    console.error('Error creating signer:', err)
    error.value = err as Error
    return null
  } finally {
    isCreating.value = false
  }
}
```

### 3. Component Error Handling

Components should use toast notifications and reactive error state:

```vue
<script setup>
const { error, createSigner } = useSignerMutations()

watch(error, (newError) => {
  if (newError) {
    toast.error(getErrorMessage(newError, 'Default error message'))
  }
})
</script>

<template>
  <div v-if="error" class="text-destructive text-sm">
    {{ getErrorMessage(error, 'Operation failed') }}
  </div>
</template>
```

## shadcn/ui Component Usage

Nuxt auto-imports these components, so you can use them directly in templates:

```vue
<template>
  <Card>
    <CardHeader>
      <CardTitle>Card Title</CardTitle>
      <CardDescription>Card Description</CardDescription>
    </CardHeader>
    <CardContent>
      <p>Content goes here</p>
    </CardContent>
    <CardFooter>
      <Button variant="outline">Cancel</Button>
      <Button>Submit</Button>
    </CardFooter>
  </Card>
</template>
```

## General Guidelines

- **Indentation**: Use **2 spaces**.
- **File names**: *camelCase* for composables/plugins/utilities. *PascalCase* for components (`MyComponent.vue`).
- **Component names**: *PascalCase* in definitions. Nuxt derives tag names (`<MyComponent>`).
- **Follow Existing Patterns**: Mimic existing code style.
- **TypeScript**: Use types effectively, avoid `any`. Import types explicitly.
- **Components**: Use shadcn/ui components when possible. Keep custom components small and reusable.
- **Composables**: Use default exports. Separate data fetching from mutations.
- **Dynamic Routes**: Use Nuxt's file-based routing with bracket notation for dynamic segments: `[paramName]`.
- **Clarity**: Write clear code. Comment only complex logic.
- **Error Handling**: Implement robust error handling with user-friendly messages.
- **Accessibility**: Keep accessibility in mind.
- **Testing**: Write unit tests for critical functionality. 