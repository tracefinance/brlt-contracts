---
description: General rules
globs: 
alwaysApply: true
---
# Vault0 Project Guidelines

This document provides general guidelines for developing the Vault0 project, optimized for AI assistant usage.

## Project Overview
Vault0 is a full-stack web3 application combining blockchain technology with modern web development. It uses a layered architecture with clear separation of concerns.

## Core Development Principles
- Follow DRY (Don't Repeat Yourself).
- Implement comprehensive testing.
- Prioritize security and performance.
- Maintain consistent code style.
- Focus on accessibility and user experience.
- **Code Comment**: DO NOT ADD unecessary comments to the code.

## Project Structure
```
vault0/
├── ui/              # Frontend Remix application
├── contracts/       # Smart contracts
├── cmd/             # Command-line applications
├── internal/        # Backend application code
└── migrations/      # Database migrations
```
*Note: Refer to `frontend.md` and `backend.md` for detailed structures of `ui/` and `internal/` respectively.* 

## Technology Stack Overview
- **Frontend**: Remix, TypeScript, TailwindCSS
- **Backend**: Go, SQLite, Gin
- **Blockchain**: Solidity, Hardhat
- **Testing**: Jest, Go testing, Hardhat test

## General Code Style Guidelines
- Use meaningful names for variables, functions, and files.
- Keep functions small and focused.
- Document complex logic clearly.
- Handle errors appropriately in each layer.
- Implement proper logging.
- Follow consistent formatting.

*Note: Refer to `frontend.md`, `backend.md`, and `solidity.md` (if available) for language/framework-specific style guidelines.*

## Git Workflow
- **NEVER COMMIT THE CODE UNLESS YOU'RE ASKED TO DO IT.**
- Follow Angular commit convention (e.g., `feat: add user login`, `fix: correct validation bug`).
- Check `git status` and `git diff` to create meaningful commit messages.
- Keep commits focused and atomic.
- Use a proper branching strategy (e.g., feature branches).
- Review code before merging.
- Maintain a clean git history.
- **Do not use multi-line commit messages (`\n`)**. Use additional `-m` parameters if needed (e.g., `git commit -m "feat: subject" -m "Detailed description..."`).

## General Testing Requirements
- Maintain high test coverage.
- Test edge cases and error scenarios.
- Implement integration tests.
- Use proper mocking.
- Include tests for accessibility, performance, and security where applicable.

## General Documentation Guidelines
- Maintain an up-to-date project `README.md`.
- Document APIs, components, contract functions, configuration, and deployment procedures.
- Keep inline code documentation current.

## General Security Guidelines
- Implement proper authentication and authorization.
- Validate all inputs.
- Protect against common vulnerabilities (e.g., OWASP Top 10).
- Handle sensitive data securely.
- Implement rate limiting where appropriate.
- Monitor for security issues.

## General Performance Guidelines
- Optimize database queries and use proper indexing.
- Implement caching where beneficial.
- Optimize frontend bundle sizes and smart contract gas usage.
- Handle large datasets efficiently (e.g., pagination).

## General Error Handling
- Use proper error types/codes.
- Implement sensible error recovery where possible.
- Log errors appropriately with context.
- Return user-friendly error responses from APIs.

## Monitoring and Logging
- Implement structured logging across the application.
- Track errors and exceptions effectively.

## Development Environment
- Document setup procedures clearly.
- Use consistent tooling (linters, formatters).
- Maintain development/local testing scripts and databases.

## Quality Assurance
- Perform code reviews focusing on quality and adherence to guidelines.
- Test for accessibility, cross-browser compatibility, responsive design, performance, and security. 