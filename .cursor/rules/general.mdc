---
description: General rules
globs: 
alwaysApply: true
---
# Vault0 Project Guidelines

This document provides general guidelines for developing the Vault0 project, optimized for AI assistant usage. **Use the code snippets as reference for best practices.**

## Project Overview
Vault0 is a full-stack web3 application combining blockchain technology with modern web development. It uses a layered architecture with clear separation of concerns.

## Core Development Principles
- Follow DRY (Don't Repeat Yourself).
- Implement comprehensive testing.
- Prioritize security and performance.
- Maintain consistent code style.
- Focus on accessibility and user experience.
- **Code Comment**: DO NOT ADD unnecessary comments to the code.

## Project Structure
```
vault0/
├── ui/              # Frontend Remix application
├── contracts/       # Smart contracts
├── cmd/             # Command-line applications
├── internal/        # Backend application code
└── migrations/      # Database migrations
```
*Note: Refer to `frontend.md` and `backend.md` for detailed structures of `ui/` and `internal/` respectively.* 

## Technology Stack Overview
- **Frontend**: Remix, TypeScript, TailwindCSS
- **Backend**: Go, SQLite, Gin
- **Blockchain**: Solidity, Hardhat
- **Testing**: Jest, Go testing, Hardhat test

## General Code Style Guidelines
- Use meaningful names for variables, functions, and files.
  - **Bad:**
    ```typescript
    function d(a: number) {}
    ```
  - **Good:**
    ```typescript
    function calculateTotalPrice(amount: number) {}
    ```
  - **Go:**
    ```go
    // Bad
    func f(x int) {}
    // Good
    func fetchUserByID(id int) {}
    ```
  - **Solidity:**
    ```solidity
    // Bad
    function x(uint a) public {}
    // Good
    function deposit(uint256 amount) public {}
    ```
- Keep functions small and focused.
- Document complex logic clearly (but avoid unnecessary comments).
- Handle errors appropriately in each layer.
- Implement proper logging.
- Follow consistent formatting.
- **Avoid deep if nesting and adopt a fail-fast design pattern.**
  - Handle errors and invalid states as early as possible, returning or exiting immediately to keep code flat and readable.
  - **Bad**
    ```go
    // Bad: Deep nesting
    func process(data *Data) error {
        if data != nil {
            if data.Valid {
                // ...
            } else {
                return errors.New("invalid data")
            }
        } else {
            return errors.New("nil data")
        }
        return nil
    }
    ```
  - **Good**
    ```go
    // Good: Fail-fast
    func process(data *Data) error {
        if data == nil {
            return errors.New("nil data")
        }
        if !data.Valid {
            return errors.New("invalid data")
        }
        // ...
        return nil
    }
    ```
  - **Typescript:**:
    ```typescript
    // Bad
    function getUser(user?: User) {
      if (user) {
        if (user.active) {
          // ...
        } else {
          throw new Error('Inactive user');
        }
      } else {
        throw new Error('No user');
      }
    }
    // Good
    function getUser(user?: User) {
      if (!user) throw new Error('No user');
      if (!user.active) throw new Error('Inactive user');
      // ...
    }
    ```

*Note: Refer to `frontend.md`, `backend.md`, and `solidity.md` (if available) for language/framework-specific style guidelines.*

## Git Workflow
- **NEVER COMMIT THE CODE UNLESS YOU'RE ASKED TO DO IT.**
- Follow Angular commit convention (e.g., `feat: add user login`, `fix: correct validation bug`).
- Check `git status` and `git diff` to create meaningful commit messages.
- Keep commits focused and atomic.
- Use a proper branching strategy (e.g., feature branches).
- Review code before merging.
- Maintain a clean git history.
- **Do not use multi-line commit messages (`\n`)**. Use additional `-m` parameters if needed (e.g., `git commit -m "feat: subject" -m "Detailed description..."`).

### Git Commit Format

All commits must follow the Angular Conventional Commit format:

```
<type>([optional scope]): <description>

[optional body]

[optional footer]
```

Where:
- **type**: Describes the kind of change:
  - `feat`: A new feature
  - `fix`: A bug fix
  - `docs`: Documentation only changes
  - `style`: Changes that do not affect code meaning (formatting, etc)
  - `refactor`: Code change that neither fixes a bug nor adds a feature
  - `perf`: Code change that improves performance
  - `test`: Adding or correcting tests
  - `chore`: Changes to build process or auxiliary tools
  - `ci`: Changes to CI configuration

- **scope**: Optional component affected (e.g., `wallet`, `user`, `api`)

- **description**: 
  - Use imperative, present tense ("add" not "added" or "adds")
  - Don't capitalize first letter
  - No period at the end
  - Keep under 72 characters
  - Be clear and descriptive

Examples:
```
feat(notification): add user notification system
fix(wallet): correct balance calculation for token transfers
docs(readme): update setup instructions
refactor(transaction): simplify validation process
test(api): add tests for wallet creation endpoint
chore(deps): update dependencies
```

### Commit Rules

1. Keep commits focused on a single change or related set of changes.
2. Write descriptive messages that explain WHY, not just WHAT.
3. Reference issue numbers when applicable: `fix(user): correct login validation (fixes #123)`.
4. Use additional `-m` parameters for longer descriptions, not multi-line commit messages.
5. Ensure code passes all tests before committing.
6. Follow the team's branching strategy.
7. Never commit directly to main branches.
8. When in doubt, prefer multiple smaller commits over one large commit.

## General Testing Requirements
- Maintain high test coverage.
- Test edge cases and error scenarios.
- Implement integration tests.
- Use proper mocking.
- Include tests for accessibility, performance, and security where applicable.

## General Documentation Guidelines
- Maintain an up-to-date project `README.md`.
- Document APIs, components, contract functions, configuration, and deployment procedures.
- Keep inline code documentation current.
- **Example (TypeScript JSDoc):**
  ```typescript
  /**
   * Calculates the total price including tax.
   * @param price Base price
   * @param tax Tax rate
   */
  function calculateTotal(price: number, tax: number): number {
    return price * (1 + tax);
  }
  ```
- **Example (Go):**
  ```go
  // Add returns the sum of a and b.
  func Add(a, b int) int {
    return a + b
  }
  ```
- **Example (Solidity NatSpec):**
  ```solidity
  /// @notice Transfers tokens to a recipient
  /// @param recipient The address to transfer to
  /// @param amount The amount to transfer
  function transfer(address recipient, uint256 amount) public {}
  ```

## General Security Guidelines
- Implement proper authentication and authorization.
- Validate all inputs.
  - **TypeScript:**
    ```typescript
    if (typeof userId !== 'string') throw new Error('Invalid userId');
    ```
  - **Go:**
    ```go
    if len(username) == 0 {
      return errors.New("username required")
    }
    ```
  - **Solidity:**
    ```solidity
    require(amount > 0, "Amount must be positive");
    ```
- Protect against common vulnerabilities (e.g., OWASP Top 10).
- Handle sensitive data securely.
- Implement rate limiting where appropriate.
- Monitor for security issues.

## General Performance Guidelines
- Optimize database queries and use proper indexing.
- Implement caching where beneficial.
- Optimize frontend bundle sizes and smart contract gas usage.
- Handle large datasets efficiently (e.g., pagination).


## General Error Handling
- Use proper error types/codes.
- Implement sensible error recovery where possible.
- Log errors appropriately with context.
- Return user-friendly error responses from APIs.
- **TypeScript Example:**
  ```typescript
  try {
    // ...
  } catch (err) {
    logger.error('Failed to process request', { err });
    res.status(500).json({ error: 'Internal server error' });
  }
  ```
- **Go Example:**
  ```go
  if err != nil {
    log.WithError(err).Error("Failed to process request")
    http.Error(w, "Internal server error", http.StatusInternalServerError)
    return
  }
  ```
- **Solidity Example:**
  ```solidity
  require(balance[msg.sender] >= amount, "Insufficient balance");
  ```

## Monitoring and Logging
- Implement structured logging across the application.
- Track errors and exceptions effectively.
- **TypeScript Example:**
  ```typescript
  logger.info('User logged in', { userId });
  ```
- **Go Example:**
  ```go
  log.WithFields(log.Fields{"user": userID}).Info("User logged in")
  ```

## Development Environment
- Document setup procedures clearly.
- Use consistent tooling (linters, formatters).
- Maintain development/local testing scripts and databases.

## Quality Assurance
- Perform code reviews focusing on quality and adherence to guidelines.
- Test for accessibility, cross-browser compatibility, responsive design, performance, and security.
