---
description: General rules
globs: 
alwaysApply: true
---

# Vault0 Project Guidelines

## Project Overview
Vault0 is a full-stack web3 application that combines blockchain technology with modern web development. The project follows a layered architecture approach with clear separation of concerns between backend, frontend, and smart contract components.

## Core Development Principles
- Write clean, maintainable, and well-documented code
- Follow DRY (Don't Repeat Yourself) principles
- Implement comprehensive testing for all components
- Prioritize security and performance
- Maintain consistent code style across all technologies
- Focus on accessibility and user experience
- Use TypeScript for type safety where applicable

## Project Structure
```
vault0/
├── ui/              # Frontend NextJS application
│   ├── components/  # React components
│   ├── hooks/       # Custom React hooks
│   ├── lib/         # Utility functions and constants
│   ├── pages/       # Next.js pages
│   ├── styles/      # Global styles and Tailwind config
│   └── types/       # TypeScript type definitions
├── contracts/       # Smart contracts
│   ├── solidity/    # Contract source files
│   ├── test/        # Contract tests
│   └── scripts/     # Deployment and utility scripts
├── cmd/             # Command-line applications
├── internal/        # Backend application code
│   ├── api/         # Communication Layer (Layer 3)
│   ├── core/        # Core/Infrastructure Layer (Layer 1)
│   └── services/    # Service Layer (Layer 2)
└── migrations/      # Database migrations
```

## Technology Stack
- Frontend: Next.js, TypeScript, TailwindCSS
- Backend: Go, SQLite, Gin
- Blockchain: Solidity, Hardhat
- Testing: Jest, Go testing, Hardhat test

## Code Style Guidelines

### General
- Use meaningful and descriptive names for variables, functions, and files
- Keep functions small and focused on a single responsibility
- Document complex logic with clear comments
- Handle errors appropriately in each layer
- Implement proper logging and monitoring
- Follow consistent formatting in each language

### Frontend (Next.js)
- Use functional components with hooks
- Implement proper TypeScript types
- Use Tailwind for styling
- Follow accessibility best practices
- Implement proper error boundaries
- Use proper state management
- Handle loading and error states
- Implement proper form validation
- Use proper SEO practices

### Backend (Go)
- Follow standard Go project layout
- Always prefer to use `any` as `interface{}`
- Use proper error handling with context
- Implement proper middleware
- Use prepared statements for database operations
- Implement proper validation
- Use proper logging
- Handle graceful shutdown
- Implement proper testing

### Smart Contracts (Solidity)
- Follow latest Solidity best practices
- Implement proper access control
- Use safe math operations
- Follow security best practices
- Implement proper event logging
- Optimize for gas efficiency
- Implement comprehensive testing
- Document with NatSpec comments

## Git Workflow
- Follow Angular commit convention
- Always Check git status and diff to generate meaningful commit messages
- Keep commits focused and atomic
- Use proper branching strategy
- Review code before merging
- Maintain clean git history
- Do not commit multi-line messages (\n)! Use additionals `-m` parameter 

## Testing Requirements
- Maintain high test coverage
- Test edge cases
- Implement integration tests
- Test error scenarios
- Use proper mocking
- Test accessibility
- Test performance
- Test security

## Documentation
- Maintain up-to-date README
- Document API endpoints
- Document component props
- Document contract functions
- Keep inline documentation current
- Document deployment procedures
- Document configuration options

## Security Guidelines
- Implement proper authentication
- Use proper authorization
- Validate all inputs
- Protect against common vulnerabilities
- Use proper encryption
- Handle sensitive data properly
- Implement rate limiting
- Monitor for security issues

## Performance Guidelines
- Optimize database queries
- Implement proper caching
- Optimize frontend bundle size
- Optimize smart contract gas usage
- Use proper indexing
- Implement proper pagination
- Handle large datasets efficiently

## Error Handling
- Use proper error types
- Implement proper error recovery
- Log errors appropriately
- Handle edge cases
- Return proper error responses
- Document error conditions

## Monitoring and Logging
- Implement proper logging
- Use structured logging
- Track errors and exceptions

## Development Environment
- Document setup procedures
- Use consistent tooling
- Maintain development scripts
- Use proper linting
- Use proper formatting
- Maintain development database
- Document local testing

## Quality Assurance
- Review code quality
- Test accessibility
- Test cross-browser compatibility
- Test responsive design
- Test performance
- Test security

