---
description: General rules
globs: 
alwaysApply: true
---
# Vault0 Project Guidelines

This document provides general guidelines for developing the Vault0 project.

## Project Overview
Vault0 is a full-stack web3 application combining blockchain technology with modern web development. It uses a layered architecture with clear separation of concerns.

## Core Development Principles
- Follow DRY (Don't Repeat Yourself).
- Implement comprehensive testing.
- Prioritize security and performance.
- Maintain consistent code style.
- Focus on accessibility and user experience.
- **Avoid Automatic Comments:** Do **not** add comments to generated or modified code unless explicitly requested by the user for specific sections or explanations. Focus on writing clear, self-documenting code.
- Avoid deep if nesting and adopt a fail-fast design pattern.
- Handle errors and invalid states as early as possible, returning or exiting immediately to keep code flat and readable.

## Project Structure
```
vault0/
├── ui/              # Frontend Nuxt 3 application
├── contracts/       # Smart contracts
├── cmd/             # Command-line applications
├── internal/        # Backend application code
│   ├── api/         # Layer 3: Communication (handlers, middleware, server setup)
│   ├── core/        # Layer 1: Core/Infrastructure (blockchain, contract, crypto, etc.)
│   ├── services/    # Layer 2: Service (user, wallet, auth, blockchain domains)
│   ├── config/      # Configuration management
│   ├── db/          # Database access
│   ├── errors/      # Error types and handling
│   ├── logger/      # Logging utilities
│   ├── types/       # Shared type definitions
│   └── wire/        # Dependency injection (Google Wire)
└── migrations/      # Database migrations
```
*Note: Refer to `frontend.mdc` and `backend.mdc` for detailed structures of `ui/` and `internal/` respectively.* 

## Technology Stack Overview
- **Frontend**: Nuxt 3, TypeScript, TailwindCSS with shadcn/ui components
- **Backend**: Go, SQLite, Gin
- **Blockchain**: Solidity, Hardhat
- **Testing**: Vitest, Go testing, Hardhat test

## General Code Style Guidelines
- Use meaningful names for variables, functions, and files.
- Keep functions small and focused.
- Handle errors appropriately in each layer.
- Implement proper logging.
- Follow consistent formatting.

## Git Workflow
- **NEVER COMMIT THE CODE UNLESS YOU'RE ASKED TO DO IT.**
- Follow Angular commit convention (e.g., `feat: add user login`, `fix: correct validation bug`).
- Check `git status` and `git diff` to create meaningful commit messages.
- Keep commits focused and atomic.
- Use a proper branching strategy (e.g., feature branches).
- Review code before merging.
- Maintain a clean git history.
- **Do not use multi-line commit messages (`\n`)**. Use additional `-m` parameters if needed (e.g., `git commit -m "feat: subject" -m "Detailed description..."`).

### Git Commit Format

All commits must follow the Angular Conventional Commit format:

```
<type>([optional scope]): <description>

[optional body]

[optional footer]
```

Where:
- **type**: Describes the kind of change:
  - `feat`: A new feature
  - `fix`: A bug fix
  - `docs`: Documentation only changes
  - `style`: Changes that do not affect code meaning (formatting, etc)
  - `refactor`: Code change that neither fixes a bug nor adds a feature
  - `perf`: Code change that improves performance
  - `test`: Adding or correcting tests
  - `chore`: Changes to build process or auxiliary tools
  - `ci`: Changes to CI configuration

- **scope**: Optional component affected (e.g., `wallet`, `user`, `api`)

- **description**: 
  - Use imperative, present tense ("add" not "added" or "adds")
  - Don't capitalize first letter
  - No period at the end
  - Keep under 72 characters
  - Be clear and descriptive

Examples:
```
feat(notification): add user notification system
fix(wallet): correct balance calculation for token transfers
docs(readme): update setup instructions
refactor(transaction): simplify validation process
test(api): add tests for wallet creation endpoint
chore(deps): update dependencies
```

### Commit Rules

1. Keep commits focused on a single change or related set of changes.
2. Write descriptive messages that explain WHY, not just WHAT.
3. Reference issue numbers when applicable: `fix(user): correct login validation (fixes #123)`.
4. Use additional `-m` parameters for longer descriptions, not multi-line commit messages.
5. Ensure code passes all tests before committing.
6. Follow the team's branching strategy.
7. Never commit directly to main branches.
8. When in doubt, prefer multiple smaller commits over one large commit.

## General Testing Requirements
- Maintain high test coverage.
- Test edge cases and error scenarios.
- Implement integration tests.
- Use proper mocking.
- Include tests for accessibility, performance, and security where applicable.

## General Documentation Guidelines
- Maintain an up-to-date project `README.md`.
- Document APIs, components, contract functions, configuration, and deployment procedures.
- Keep inline code documentation current.

## General Security Guidelines
- Implement proper authentication and authorization.
- Validate all inputs.
- Protect against common vulnerabilities (e.g., OWASP Top 10).
- Handle sensitive data securely.
- Implement rate limiting where appropriate.
- Monitor for security issues.

## General Performance Guidelines
- Optimize database queries and use proper indexing.
- Implement caching where beneficial.
- Optimize frontend bundle sizes and smart contract gas usage.
- Handle large datasets efficiently (e.g., pagination).

## General Error Handling
- Use appropriate error handling mechanisms according to the language/framework.
- Implement consistent error handling across all components.
- Provide meaningful error messages.
- Log errors with contextual information.

## Monitoring and Logging
- Implement structured logging across the application.
- Track errors and exceptions effectively.

## Development Environment
- Document setup procedures clearly.
- Use consistent tooling (linters, formatters).
- Maintain development/local testing scripts and databases.

## Quality Assurance
- Perform code reviews focusing on quality and adherence to guidelines.
- Test for accessibility, cross-browser compatibility, responsive design, performance, and security.

