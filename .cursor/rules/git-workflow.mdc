---
description: Specifies the Git branching strategy (main, feat, fix), conventional commit message format, and pull request standards
globs: 
alwaysApply: false
---
# Git Guidelines

## Branch Structure
- `main`: Production
- `feat/...`: Feature development
- `bugfix/...`: Bug fixes
- `hotfix/...`: Emergency production fixes
- `release/...`: Release preparation

## Commit Messages
- **Format**: `<type>[scope]: description` (keep under 60 chars)
- **Types**: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
- Example: `feat(account): add endpoint for fetching user profile`

## Pull Requests

- **Template:** **ALWAYS** use the template located at `.github/PULL_REQUEST_TEMPLATE.md` when creating pull requests via tools or the GitHub UI. Fill out all relevant sections accurately:
    - Description (including linked issue)
    - Type of change
    - Testing details
    - Checklist completion
- **Content Requirements:** Ensure the PR description adequately covers changes, rationale, test coverage details, any breaking changes, and necessary deployment notes, aligning with the template's structure.
- **CODEOWNERS:** Be mindful of the `.github/CODEOWNERS` file for required reviewers.
- **Review Focus:** Reviews will primarily assess code style/quality, test coverage, performance, security, and adherence to architectural guidelines.
- **Merge Criteria:** Merging requires:
    - CI checks passing.
    - No merge conflicts.
    - Relevant documentation (including code comments and potentially rule updates) is added or updated.
    - Sufficient test coverage demonstrated.
    - Approval according to CODEOWNERS rules.

## "Create Smart Commit" Workflow

This workflow handles committing related changes, pushing them, and ensuring an up-to-date Pull Request exists.

**Trigger:** Use command phrases like `"Create smart commit"`, `"smart commit"`, or `"smart commit it"`.

**Process:**
1.  **PR Check/Creation:**
    *   The assistant checks if an open PR exists for the current branch.
    *   If **NO PR exists**, it will automatically create a PR using `mcp_github_create_pull_request` with:
        *   **Title:** Current branch name, with `/` replaced by `:` (e.g., `feat/my-feature` becomes `feat:my-feature`)
        *   **Body:** "WIP"
    *   If **a PR exists**, its number is noted for later update.
2.  **Analyze Local Changes:** The assistant runs `git status` to identify uncommitted changes.
3.  **Commit Loop (If Changes Exist):**
    *   The assistant analyzes changed files and proposes logical groupings with Conventional Commit messages.
    *   The proposed groups/messages are presented for user review and refinement.
    *   Once approved, the assistant executes `git add` and `git commit` sequentially for each group.
    *   The assistant runs `git push origin <current-branch-name>`.
4.  **PR Update:**
    *   The assistant analyzes *all* commits on the branch vs. `main`.
    *   It regenerates the PR title and body using the `.github/PULL_REQUEST_TEMPLATE.md`, reflecting the total current state of the branch.
    *   **The regenerated title and body are presented for user approval.**
    *   Once approved, the assistant uses `mcp_github_update_issue` to update the PR (which is guaranteed to exist at this point).

**Goal:** To provide a single command that maintains a clean commit history, pushes changes, and keeps a corresponding Pull Request created and accurately updated (with user approval steps for commits and PR content).