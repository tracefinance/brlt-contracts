// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"vault0/internal/api"
	transaction2 "vault0/internal/api/handlers/transaction"
	user2 "vault0/internal/api/handlers/user"
	wallet3 "vault0/internal/api/handlers/wallet"
	"vault0/internal/config"
	"vault0/internal/core/blockchain"
	"vault0/internal/core/blockexplorer"
	"vault0/internal/core/contract"
	"vault0/internal/core/db"
	"vault0/internal/core/keystore"
	"vault0/internal/core/tokenstore"
	"vault0/internal/core/wallet"
	"vault0/internal/logger"
	"vault0/internal/services/transaction"
	"vault0/internal/services/user"
	wallet2 "vault0/internal/services/wallet"
	"vault0/internal/types"
)

// Injectors from wire.go:

// InitializeContainer creates a new container with all dependencies wired up
// BuildContainer is a placeholder function that will be replaced by wire with the actual implementation
func BuildContainer() (*Container, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	dbDB, err := db.NewDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	loggerLogger, err := logger.NewLogger(configConfig)
	if err != nil {
		return nil, err
	}
	keyStore, err := keystore.NewKeyStore(dbDB, configConfig)
	if err != nil {
		return nil, err
	}
	tokenStore := tokenstore.NewTokenStore(dbDB)
	chains, err := types.NewChains(configConfig)
	if err != nil {
		return nil, err
	}
	factory := wallet.NewFactory(keyStore, chains, configConfig)
	registry := blockchain.NewRegistry(chains, configConfig)
	contractFactory := contract.NewFactory(registry, factory, configConfig)
	blockexplorerFactory := blockexplorer.NewFactory(chains, configConfig)
	core := NewCore(configConfig, dbDB, loggerLogger, keyStore, tokenStore, chains, factory, registry, contractFactory, blockexplorerFactory)
	repository := user.NewRepository(dbDB)
	service := user.NewService(repository)
	handler := user2.NewHandler(service)
	walletRepository := wallet2.NewRepository(dbDB)
	walletService := wallet2.NewService(configConfig, loggerLogger, walletRepository, keyStore, factory, registry, chains)
	walletHandler := wallet3.NewHandler(walletService)
	transactionRepository := transaction.NewRepository(dbDB)
	transactionService := transaction.NewService(configConfig, loggerLogger, transactionRepository, walletService, blockexplorerFactory, chains)
	transactionHandler := transaction2.NewHandler(transactionService)
	server := api.NewServer(loggerLogger, configConfig, handler, walletHandler, transactionHandler)
	services := NewServices(walletService, service, transactionService)
	container := NewContainer(core, server, services)
	return container, nil
}

// wire.go:

// Container holds all application dependencies organized by layer
type Container struct {
	Core     *Core
	Server   *api.Server
	Services *Services
}

// NewContainer creates a new dependency injection container
func NewContainer(
	core *Core,
	server *api.Server,
	services *Services,
) *Container {
	return &Container{
		Core:     core,
		Server:   server,
		Services: services,
	}
}

// ContainerSet combines all dependency sets
var ContainerSet = wire.NewSet(
	CoreSet,
	ServerSet,
	ServicesSet,
	NewContainer,
)
